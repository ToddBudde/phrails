To create a new project using phrails please go to the phrails-bin project:

	http://github.com/mediaslave/phrails-bin



Under Apache, add the following to virtual host:

	<VirtualHost *:80>
	    ServerName php-rails
	    DocumentRoot /home/jpalmer/projects/php/phrails
		
        setenv PHRAILS_ENV development
        setenv PHRAILS_INSTALL_PATH /

	    RewriteEngine off

	    <Location /app>
	        Order allow,deny
	        Deny from all                
	    </Location>

	    <Location /config>
	        Order allow,deny
	        Deny from all
	    </Location>

	    <Location /framework>
	        Order allow,deny
	        Deny from all
	    </Location>

	    <Location /lib>
	        Order allow,deny
	        Deny from all
	    </Location>

	    <Location />
	        RewriteEngine on      
	        RewriteCond %{REQUEST_FILENAME} !-f
	        RewriteCond %{REQUEST_FILENAME} !-d
	        RewriteRule !\.(js|ico|gif|jpg|png|css)$ /index.php
	    </Location>

	</VirtualHost>
	
Install in subdirectory 

	**
	** This is currently not working.  There is something wrong with the .htaccess file in install root.
	** You can see more about the problem: http://stackoverflow.com/questions/2423652/htaccess-send-requests-to-a-subfolders-index-php
	** Possible fix is at: http://github.com/mediaslave/phrails/issues#issue/4
	**
	** The possible fix works, but I am trying to get the rewrite to work out of the root to make things more clear.
	**

	Create a .htaccess file in:
		app
		config
		lib
		script
		tmp
		vendor
		
	The .htaccess should have 'deny from all' in the file.
	
	In the base of the app (example: /blog/) put:
	
		#setenv is only supported in apache 1.3.7
		#within in a .htaccess file
		setenv PHRAILS_ENV development
		setenv PHRAILS_BASE_URI /path/to/sub/directory/install/

		RewriteEngine on      
		RewriteBase /path/to/sub/directory/install/   
		RewriteCond %{REQUEST_FILENAME} !-f
		RewriteCond %{REQUEST_FILENAME} !-d
		RewriteRule !\.(js|ico|gif|jpg|png|css)$ /index.php

Generate controllers and models
	
	Controller generator will create the controller class and the view files based off the actions provided.
	
		Format: script/generate controller ControllerName [action, ...]
		
		Example: script/generate controller Home
		Example: script/generate controller Home index about

	Model generator will create the correct model class.  Singular model names expect plural table names.
	
		Format: script/generate model ModelName
		
		Example: script/generate model User

To create documentation from the base folder run:

	phpdoc -t docs -d . -ti Phrails -o HTML:frames:earthli -i .git/,tests/,*examples/,__view__/